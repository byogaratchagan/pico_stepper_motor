// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------------------- //
// stepper_motor_send_data //
// ----------------------- //

#define stepper_motor_send_data_wrap_target 4
#define stepper_motor_send_data_wrap 11

static const uint16_t stepper_motor_send_data_program_instructions[] = {
    0xe020, //  0: set    x, 0                       
    0xe001, //  1: set    pins, 1                    
    0x80a0, //  2: pull   block                      
    0xa0c7, //  3: mov    isr, osr                   
            //     .wrap_target
    0x80a0, //  4: pull   block                      
    0xa027, //  5: mov    x, osr                     
    0xa0e3, //  6: mov    osr, null                  
    0x80a0, //  7: pull   block                      
    0xa047, //  8: mov    y, osr                     
    0x80a0, //  9: pull   block                      
    0xa086, // 10: mov    exec, isr                  
    0x058b, // 11: jmp    y--, 11                [5] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program stepper_motor_send_data_program = {
    .instructions = stepper_motor_send_data_program_instructions,
    .length = 12,
    .origin = -1,
};

static inline pio_sm_config stepper_motor_send_data_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + stepper_motor_send_data_wrap_target, offset + stepper_motor_send_data_wrap);
    return c;
}

    void stepper_motor_send_data_program_init(PIO pio, uint sm, uint offset, uint strt_pin_no, uint num_axis, float div){
        pio_sm_config c = stepper_motor_send_data_program_get_default_config(offset);
        for (int x = strt_pin_no; x <= ((num_axis + strt_pin_no) - 1); x++) pio_gpio_init(pio, x);
        uint exec_code = 0b0110000000000000 | num_axis;
        pio_sm_set_consecutive_pindirs(pio, sm, strt_pin_no, num_axis, true);
        sm_config_set_out_pins(&c, strt_pin_no, num_axis);
        sm_config_set_out_shift(&c, true, false, 32);
        sm_config_set_clkdiv(&c, div);
        pio_sm_init(pio, sm, offset, &c);
        pio_sm_put(pio, sm, exec_code);
        pio_sm_set_enabled(pio, sm, true);
    }

#endif

